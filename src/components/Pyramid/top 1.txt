import React, { useState, useEffect } from 'react';
import './Pyramid.scss';

const Pyramid = () => {
    const [angle, setAngle] = useState(0); // Начальный угол для кругового движения
    const [animationOffset, setAnimationOffset] = useState(0);
    const [rotation, setRotation] = useState(0);
    const [baseColor, setBaseColor] = useState(200); // Основной цвет в HSL (тон)
    const [contrast, setContrast] = useState(10); // Contrast factor between squares
    const [smoothness, setSmoothness] = useState(0.5); // Smoothness factor for gradient effect

    useEffect(() => {
        const animate = () => {
            // Увеличиваем угол для имитации кругового движения
            setAngle((prevAngle) => prevAngle + 1); // Увеличиваем угол на 1 градус каждую итерацию
            requestAnimationFrame(animate);
        };
        animate();
    }, []);

    useEffect(() => {
        // Gradually update the base color over time
        const colorInterval = setInterval(() => {
            setBaseColor((prevColor) => (prevColor + 1) % 360); // Increase hue value every interval
        }, 50); // Change color every 50ms (adjust as needed)

        return () => clearInterval(colorInterval); // Clean up the interval on component unmount
    }, []);

    const squares = Array.from({ length: 10 }, (_, index) => {
        // Adjust color by adding the contrast factor to each square's hue
        const contrastColor = (baseColor + index * contrast) % 360;
        return {
            sizePercentage: (index + 1) * 10,
            color: `hsl(${contrastColor}, 80%, 60%)`,
            speedFactor: 10 + index * 5,
        };
    });

    return (
        <div className="pyramid-container" data-b1>
            <input
                type="range"
                min="0"
                max="360"
                value={baseColor}
                onChange={(e) => setBaseColor(Number(e.target.value))}
                style={{ position: 'absolute', top: '20px', left: '20px', zIndex: 11 }}
            />
            <input
                type="range"
                min="0"
                max="50"
                value={contrast}
                onChange={(e) => setContrast(Number(e.target.value))}
                style={{ position: 'absolute', top: '60px', left: '20px', zIndex: 11 }}
            />
            <input
                type="range"
                min="0"
                max="1"
                step="0.01"
                value={smoothness}
                onChange={(e) => setSmoothness(Number(e.target.value))}
                style={{ position: 'absolute', top: '100px', left: '20px', zIndex: 11 }}
            />
            {squares.map((square, index) => {
                // Используем angle для кругового движения
                const offsetX = Math.cos((angle + index * 36) * (Math.PI / 180)) * 150;
                const offsetY = Math.sin((angle + index * 36) * (Math.PI / 180)) * 150;

                return (
                    <div
                        key={index}
                        className="square"
                        style={{
                            width: `${square.sizePercentage}%`,
                            height: `${square.sizePercentage}%`,
                            backgroundColor: square.color,
                            position: 'absolute',
                            top: `50%`,
                            left: `50%`,
                            transform: `translate(-50%, -50%) translateX(${offsetX}px) translateY(${offsetY}px)`,
                            zIndex: squares.length - index,
                            transition: `background-color ${smoothness}s ease`, // Smooth transition for color change
                        }}
                    />
                );
            })}
        </div>
    );
};

export default Pyramid;
