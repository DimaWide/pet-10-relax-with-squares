import React, { useState, useEffect } from 'react';
import './Pyramid.scss';

const getRandomHSLColor = () => {
  const h = Math.floor(Math.random() * 360); // случайный оттенок от 0 до 360
  const s = Math.floor(Math.random() * 60) + 40; // насыщенность от 40 до 100
  const l = Math.floor(Math.random() * 40) + 40; // светлость от 40 до 80
  return `hsl(${h}, ${s}%, ${l}%)`;
};

const Pyramid = () => {
  const [squares, setSquares] = useState([]);

  // Инициализация квадратов
  useEffect(() => {
    const newSquares = Array.from({ length: 10 }, (_, index) => ({
      sizePercentage: (index + 1) * 10, // Размер квадрата
      color: getRandomHSLColor(), // Генерация случайного цвета
      speedFactor: 10 + index * 5, // Скорость движения
      xPos: Math.random() * window.innerWidth, // Начальная позиция по оси X
      yPos: Math.random() * window.innerHeight, // Начальная позиция по оси Y
      scale: 1, // Масштаб квадрата
    }));
    setSquares(newSquares);
  }, []);

  useEffect(() => {
    const animate = () => {
      setSquares((prevSquares) =>
        prevSquares.map((square) => {
          // Движение квадратов к центру
          let newX = square.xPos + (window.innerWidth / 2 - square.xPos) / (square.speedFactor);
          let newY = square.yPos + (window.innerHeight / 2 - square.yPos) / (square.speedFactor);

          // Масштабирование квадрата, чем ближе к центру, тем меньше он становится
          const distanceFromCenter = Math.sqrt(Math.pow(newX - window.innerWidth / 2, 2) + Math.pow(newY - window.innerHeight / 2, 2));
          const newScale = Math.max(1 - distanceFromCenter / 500, 0.1); // Масштаб уменьшается с увеличением расстояния от центра

          // Если квадрат выходит за пределы экрана, возвращаем его на противоположную сторону с новым размером
          if (newX > window.innerWidth) newX = -square.sizePercentage;
          if (newX < -square.sizePercentage) newX = window.innerWidth;
          if (newY > window.innerHeight) newY = -square.sizePercentage;
          if (newY < -square.sizePercentage) newY = window.innerHeight;

          return {
            ...square,
            xPos: newX,
            yPos: newY,
            scale: newScale, // Обновляем масштаб квадрата
          };
        })
      );

      requestAnimationFrame(animate);
    };
    animate();
  }, []);

  return (
    <div className="pyramid-container" data-b1>
      {squares.map((square, index) => {
        const offsetX = (square.xPos - window.innerWidth / 2);
        const offsetY = (square.yPos - window.innerHeight / 2);

        return (
          <div
            key={index}
            className="square"
            style={{
              width: `${square.sizePercentage}%`,
              height: `${square.sizePercentage}%`,
              backgroundColor: square.color,
              position: 'absolute',
              top: `50%`,
              left: `50%`,
              transform: `translate(-50%, -50%) translateX(${offsetX}px) translateY(${offsetY}px) scale(${square.scale})`,
              zIndex: squares.length - index,
            }}
          />
        );
      })}
    </div>
  );
};

export default Pyramid;
